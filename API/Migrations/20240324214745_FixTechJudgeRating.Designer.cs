// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DancerScoringAppDbContext))]
    [Migration("20240324214745_FixTechJudgeRating")]
    partial class FixTechJudgeRating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Orginality"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sychronization"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Perfect Synchronization"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Presence and Elegance"
                        });
                });

            modelBuilder.Entity("API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeCategory")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<int>("Requisite")
                        .HasColumnType("integer");

                    b.Property<int>("SquadType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeCategory = 1,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 2,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 3,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 4,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 5,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 6,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 7,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 8,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 9,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 10,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 11,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 12,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 13,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 14,
                            AgeCategory = 2,
                            CategoryType = 5,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 15,
                            AgeCategory = 3,
                            CategoryType = 5,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 16,
                            AgeCategory = 4,
                            CategoryType = 5,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 17,
                            AgeCategory = 2,
                            CategoryType = 5,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 18,
                            AgeCategory = 3,
                            CategoryType = 5,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 19,
                            AgeCategory = 4,
                            CategoryType = 5,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 20,
                            AgeCategory = 2,
                            CategoryType = 4,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 21,
                            AgeCategory = 3,
                            CategoryType = 4,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 22,
                            AgeCategory = 4,
                            CategoryType = 4,
                            Requisite = 1,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 23,
                            AgeCategory = 2,
                            CategoryType = 4,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 24,
                            AgeCategory = 3,
                            CategoryType = 4,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 25,
                            AgeCategory = 4,
                            CategoryType = 4,
                            Requisite = 1,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 26,
                            AgeCategory = 2,
                            CategoryType = 2,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 27,
                            AgeCategory = 3,
                            CategoryType = 2,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 28,
                            AgeCategory = 4,
                            CategoryType = 2,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 29,
                            AgeCategory = 2,
                            CategoryType = 3,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 30,
                            AgeCategory = 3,
                            CategoryType = 3,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 31,
                            AgeCategory = 4,
                            CategoryType = 3,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 32,
                            AgeCategory = 1,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 33,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 1
                        },
                        new
                        {
                            Id = 34,
                            AgeCategory = 1,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 35,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 36,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 37,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 2
                        },
                        new
                        {
                            Id = 38,
                            AgeCategory = 1,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 39,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 40,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 41,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 3
                        },
                        new
                        {
                            Id = 42,
                            AgeCategory = 1,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 43,
                            AgeCategory = 2,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 44,
                            AgeCategory = 3,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 4
                        },
                        new
                        {
                            Id = 45,
                            AgeCategory = 4,
                            CategoryType = 1,
                            Requisite = 2,
                            SquadType = 4
                        });
                });

            modelBuilder.Entity("API.Entities.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("API.Entities.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("API.Entities.Dancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Dancers");
                });

            modelBuilder.Entity("API.Entities.JudgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BodyTechniquePoints")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ChoreographyPoints")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasBonus")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RequisiteWorkPoints")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.HasIndex("UserId");

                    b.ToTable("JudgeRatings");
                });

            modelBuilder.Entity("API.Entities.PenaltyPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PenaltyScore")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("PenaltyPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Missing greeting",
                            PenaltyScore = -0.05m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prop or costume piece drop",
                            PenaltyScore = -0.05m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Leaving prop on stage after drop",
                            PenaltyScore = -0.05m
                        },
                        new
                        {
                            Id = 4,
                            Name = "For every second time overrun",
                            PenaltyScore = -0.05m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Team or solist is not ready after announcement",
                            PenaltyScore = -0.1m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Crossing a line",
                            PenaltyScore = -0.1m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Incorrectyly mixed music",
                            PenaltyScore = -0.1m
                        },
                        new
                        {
                            Id = 8,
                            Name = "The dancer supports themselves",
                            PenaltyScore = -0.1m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Too early entrance",
                            PenaltyScore = -0.2m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Missing stop figure at the end",
                            PenaltyScore = -0.2m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Missing single required costume element",
                            PenaltyScore = -0.3m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Communication between dancers or dancers and coach during presentation",
                            PenaltyScore = -0.3m
                        },
                        new
                        {
                            Id = 13,
                            Name = "Missing prop contact",
                            PenaltyScore = -0.3m
                        },
                        new
                        {
                            Id = 14,
                            Name = "Missing lift assurance",
                            PenaltyScore = -0.3m
                        },
                        new
                        {
                            Id = 15,
                            Name = "Missing single required element",
                            PenaltyScore = -0.4m
                        },
                        new
                        {
                            Id = 16,
                            Name = "Dancer fall",
                            PenaltyScore = -0.4m
                        },
                        new
                        {
                            Id = 17,
                            Name = "Putting down prop for more than 16 matching steps",
                            PenaltyScore = -0.4m
                        },
                        new
                        {
                            Id = 18,
                            Name = "Non regulation music",
                            PenaltyScore = -0.4m
                        },
                        new
                        {
                            Id = 19,
                            Name = "Different choreography from previous qualifications",
                            PenaltyScore = -0.4m
                        },
                        new
                        {
                            Id = 20,
                            Name = "Non regulation prop or costume element",
                            PenaltyScore = -0.4m
                        },
                        new
                        {
                            Id = 21,
                            Name = "Three tiered pyramids",
                            PenaltyScore = -3m
                        },
                        new
                        {
                            Id = 22,
                            Name = "Category prohibited elements",
                            PenaltyScore = -3m
                        },
                        new
                        {
                            Id = 23,
                            Name = "Unjustified lifts and throws",
                            PenaltyScore = -3m
                        },
                        new
                        {
                            Id = 24,
                            Name = "Placing non dedicated props on stage",
                            PenaltyScore = -3m
                        },
                        new
                        {
                            Id = 25,
                            Name = "Disqualification",
                            PenaltyScore = -100m
                        });
                });

            modelBuilder.Entity("API.Entities.RatingBonus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BonusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("JudgeRatingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BonusId");

                    b.HasIndex("JudgeRatingId");

                    b.ToTable("RatingBonuses");
                });

            modelBuilder.Entity("API.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Judge"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Technical Judge"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Scrutineer"
                        });
                });

            modelBuilder.Entity("API.Entities.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("GrandPrix")
                        .HasColumnType("boolean");

                    b.Property<string>("RoutineName")
                        .HasColumnType("text");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("SquadId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("API.Entities.Squad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("SquadType")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("API.Entities.SquadDancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DancerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DancerId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadDancers");
                });

            modelBuilder.Entity("API.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("API.Entities.TeamCoach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamCoaches");
                });

            modelBuilder.Entity("API.Entities.TechJudgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("PenaltyPointId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PenaltyPointId");

                    b.HasIndex("RoutineId");

                    b.HasIndex("UserId");

                    b.ToTable("TechJudgeRatings");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.UserCompetition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCompetitions");
                });

            modelBuilder.Entity("API.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("API.Entities.Dancer", b =>
                {
                    b.HasOne("API.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("API.Entities.JudgeRating", b =>
                {
                    b.HasOne("API.Entities.Routine", "Routine")
                        .WithMany("JudgeRating")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", "User")
                        .WithMany("JudgeRating")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.RatingBonus", b =>
                {
                    b.HasOne("API.Entities.Bonus", "Bonus")
                        .WithMany("RatingBonus")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.JudgeRating", "JudgeRating")
                        .WithMany("RatingBonus")
                        .HasForeignKey("JudgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("JudgeRating");
                });

            modelBuilder.Entity("API.Entities.Routine", b =>
                {
                    b.HasOne("API.Entities.Category", "Category")
                        .WithMany("Routines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Competition", "Competition")
                        .WithMany("Routinines")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Competition");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("API.Entities.Squad", b =>
                {
                    b.HasOne("API.Entities.Team", "Team")
                        .WithMany("Squads")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("API.Entities.SquadDancer", b =>
                {
                    b.HasOne("API.Entities.Dancer", "Dancer")
                        .WithMany("SquadDancers")
                        .HasForeignKey("DancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Squad", "Squad")
                        .WithMany("Dancers")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dancer");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("API.Entities.TeamCoach", b =>
                {
                    b.HasOne("API.Entities.Coach", "Coach")
                        .WithMany("TeamCoaches")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("API.Entities.TechJudgeRating", b =>
                {
                    b.HasOne("API.Entities.PenaltyPoint", "PenaltyPoint")
                        .WithMany("TechJudgeRatings")
                        .HasForeignKey("PenaltyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Routine", "Routine")
                        .WithMany("TechJudgeRating")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", "User")
                        .WithMany("TechJudgeRating")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PenaltyPoint");

                    b.Navigation("Routine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.UserCompetition", b =>
                {
                    b.HasOne("API.Entities.Competition", "Competition")
                        .WithMany("Users")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", "User")
                        .WithMany("UserCompetitions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.UserRole", b =>
                {
                    b.HasOne("API.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Bonus", b =>
                {
                    b.Navigation("RatingBonus");
                });

            modelBuilder.Entity("API.Entities.Category", b =>
                {
                    b.Navigation("Routines");
                });

            modelBuilder.Entity("API.Entities.Coach", b =>
                {
                    b.Navigation("TeamCoaches");
                });

            modelBuilder.Entity("API.Entities.Competition", b =>
                {
                    b.Navigation("Routinines");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Entities.Dancer", b =>
                {
                    b.Navigation("SquadDancers");
                });

            modelBuilder.Entity("API.Entities.JudgeRating", b =>
                {
                    b.Navigation("RatingBonus");
                });

            modelBuilder.Entity("API.Entities.PenaltyPoint", b =>
                {
                    b.Navigation("TechJudgeRatings");
                });

            modelBuilder.Entity("API.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Entities.Routine", b =>
                {
                    b.Navigation("JudgeRating");

                    b.Navigation("TechJudgeRating");
                });

            modelBuilder.Entity("API.Entities.Squad", b =>
                {
                    b.Navigation("Dancers");
                });

            modelBuilder.Entity("API.Entities.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Squads");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("JudgeRating");

                    b.Navigation("Roles");

                    b.Navigation("TechJudgeRating");

                    b.Navigation("UserCompetitions");
                });
#pragma warning restore 612, 618
        }
    }
}
